import google.generativeai as genai
import os
from dotenv import load_dotenv
import json
from data import PERSONAL_INFO, SKILLS, PROJECTS, STATS, CONTACT_INFO

# Load environment variables
load_dotenv()

class GeminiPortfolioChatbot:
    def __init__(self):
        self.api_key = os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            raise ValueError("GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong file .env")
        
        # C·∫•u h√¨nh Gemini API
        genai.configure(api_key=self.api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        
        # Context v·ªÅ th√¥ng tin c√° nh√¢n
        self.context = self._build_context()
        
        # L·ªãch s·ª≠ h·ªôi tho·∫°i
        self.conversation_history = []
    
    def _build_context(self):
        """X√¢y d·ª±ng context v·ªÅ th√¥ng tin c√° nh√¢n"""
        context = f"""
B·∫°n l√† m·ªôt chatbot th√¥ng minh ƒë·∫°i di·ªán cho {PERSONAL_INFO['name']} ({PERSONAL_INFO['english_name']}), m·ªôt {PERSONAL_INFO['title']}.

TH√îNG TIN C√Å NH√ÇN / PERSONAL INFORMATION:
- T√™n / Name: {PERSONAL_INFO['name']} (English: {PERSONAL_INFO['english_name']})
- Ngh·ªÅ nghi·ªáp / Profession: {PERSONAL_INFO['title']}
- Kinh nghi·ªám / Experience: {PERSONAL_INFO['experience_years']} years
- V·ªã tr√≠ / Location: {PERSONAL_INFO['location']}
- M√¥ t·∫£ (VI): {PERSONAL_INFO['description_vi']}
- Description (EN): {PERSONAL_INFO['description_en']}
- ƒêam m√™ (VI): {PERSONAL_INFO['passion_vi']}
- Passion (EN): {PERSONAL_INFO['passion_en']}
- M·ª•c ti√™u (VI): {PERSONAL_INFO['goal_vi']}
- Goal (EN): {PERSONAL_INFO['goal_en']}

K·ª∏ NƒÇNG L·∫¨P TR√åNH / PROGRAMMING SKILLS:
Frontend: {', '.join([f"{skill} ({level}%)" for skill, level in SKILLS['frontend'].items()])}
Backend: {', '.join([f"{skill} ({level}%)" for skill, level in SKILLS['backend'].items()])}
Tools: {', '.join([f"{skill} ({level}%)" for skill, level in SKILLS['tools'].items()])}
Chuy√™n m√¥n / Specialties: {', '.join(SKILLS['specialties'])}

D·ª∞ √ÅN ƒê√É TH·ª∞C HI·ªÜN / COMPLETED PROJECTS:
"""
        
        for i, project in enumerate(PROJECTS, 1):
            github_info = f"GitHub: {project.get('github_link', 'ƒêang c·∫≠p nh·∫≠t / In development')}"
            demo_info = f"Demo: {project.get('live_demo', 'ƒêang ph√°t tri·ªÉn / In development')}"
            features_info = f"T√≠nh nƒÉng / Features: {', '.join(project.get('features', []))}" if project.get('features') else ""
            
            context += f"""{i}. {project['title']}: 
   - M√¥ t·∫£ / Description: {project['description']}
   - C√¥ng ngh·ªá / Technologies: {', '.join(project['technologies'])}
   - {github_info}
   - {demo_info}
   - {features_info}

"""
        
        context += f"""
TH·ªêNG K√ä NGH·ªÄ NGHI·ªÜP:
- D·ª± √°n ho√†n th√†nh: {STATS['projects_completed']}
- NƒÉm kinh nghi·ªám: {STATS['years_experience']}
- Kh√°ch h√†ng h√†i l√≤ng: {STATS['happy_clients']}

TH√îNG TIN LI√äN H·ªÜ:
- Email: {CONTACT_INFO['email']}
- S·ªë ƒëi·ªán tho·∫°i: {CONTACT_INFO['phone']}
- V·ªã tr√≠: {CONTACT_INFO['location']}
- GitHub: {CONTACT_INFO['github']}
- Ph·∫£n h·ªìi: {CONTACT_INFO['response_time']}
- T√¨nh tr·∫°ng: {CONTACT_INFO['availability']}
- CV: {CONTACT_INFO['cv']}

H∆Ø·ªöNG D·∫™N TR·∫¢ L·ªúI:
1. Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát tr·ª´ khi ƒë∆∞·ª£c y√™u c·∫ßu kh√°c
2. Gi·ªØ gi·ªçng ƒëi·ªáu th√¢n thi·ªán, chuy√™n nghi·ªáp
3. Khi ƒë∆∞·ª£c h·ªèi v·ªÅ th√¥ng tin c√° nh√¢n, h√£y tr·∫£ l·ªùi nh∆∞ th·ªÉ b·∫°n ch√≠nh l√† L√™ Ng·ªçc D∆∞∆°ng
4. S·ª≠ d·ª•ng emoji ph√π h·ª£p ƒë·ªÉ l√†m c√¢u tr·∫£ l·ªùi sinh ƒë·ªông
5. N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn th√¥ng tin portfolio, h√£y l·ªãch s·ª± chuy·ªÉn h∆∞·ªõng v·ªÅ ch·ªß ƒë·ªÅ ngh·ªÅ nghi·ªáp
6. Lu√¥n khuy·∫øn kh√≠ch ng∆∞·ªùi d√πng li√™n h·ªá n·∫øu h·ªç quan t√¢m ƒë·∫øn h·ª£p t√°c
7. Khi ƒë∆∞·ª£c h·ªèi v·ªÅ d·ª± √°n, h√£y bao g·ªìm c·∫£ link GitHub v√† demo n·∫øu c√≥
8. Khi ƒë∆∞·ª£c h·ªèi v·ªÅ li√™n h·ªá, h√£y cung c·∫•p email v√† s·ªë ƒëi·ªán tho·∫°i c·ª• th·ªÉ
9. KHI CUNG C·∫§P LINKS: H√£y vi·∫øt link ƒë·∫ßy ƒë·ªß c√≥ https:// ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ click v√†o (v√≠ d·ª•: GitHub: https://github.com/lnduong203/Home-Rentals)
10. Format links m·ªôt c√°ch r√µ r√†ng v√† c√≥ th·ªÉ click ƒë∆∞·ª£c trong giao di·ªán chat
"""
        return context
    
    def chat(self, message, language="vi"):
        """X·ª≠ l√Ω tin nh·∫Øn chat v·ªõi Gemini"""
        try:
            # T·∫°o prompt v·ªõi context v√† ng√¥n ng·ªØ
            if language == "en":
                language_instruction = "Please respond in English. You are representing Duong Le Ngoc, answer as if you are him."
                prompt_template = f"{self.context}\n\n{language_instruction}\n\nUser question: {message}\n\nPlease answer this question based on the information above:"
            else:
                language_instruction = "H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát. B·∫°n ƒëang ƒë·∫°i di·ªán cho L√™ Ng·ªçc D∆∞∆°ng, h√£y tr·∫£ l·ªùi nh∆∞ th·ªÉ b·∫°n ch√≠nh l√† anh ·∫•y."
                prompt_template = f"{self.context}\n\n{language_instruction}\n\nC√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: {message}\n\nH√£y tr·∫£ l·ªùi c√¢u h·ªèi n√†y d·ª±a tr√™n th√¥ng tin tr√™n:"
            
            # G·ªçi Gemini API
            response = self.model.generate_content(prompt_template)
            
            # L∆∞u v√†o l·ªãch s·ª≠
            self.conversation_history.append({
                "user": message,
                "bot": response.text,
                "language": language,
                "timestamp": "now"
            })
            
            return {
                "response": response.text,
                "success": True,
                "language": language,
                "message_count": len(self.conversation_history)
            }
            
        except Exception as e:
            error_msg = (
                f"Sorry, I encountered a technical issue. Please try again! üòÖ\nError: {str(e)}" 
                if language == "en" 
                else f"Xin l·ªói, t√¥i g·∫∑p ch√∫t v·∫•n ƒë·ªÅ k·ªπ thu·∫≠t. Vui l√≤ng th·ª≠ l·∫°i sau! üòÖ\nL·ªói: {str(e)}"
            )
            return {
                "response": error_msg,
                "success": False,
                "language": language,
                "error": str(e)
            }
    
    def get_conversation_history(self):
        """L·∫•y l·ªãch s·ª≠ h·ªôi tho·∫°i"""
        return self.conversation_history
    
    def clear_history(self):
        """X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i"""
        self.conversation_history = []
        return {"message": "ƒê√£ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i"}

# Test chatbot
if __name__ == "__main__":
    try:
        bot = GeminiPortfolioChatbot()
        
        print("ü§ñ Gemini Portfolio Chatbot kh·ªüi ƒë·ªông!")
        print("G√µ 'quit' ƒë·ªÉ tho√°t\n")
        
        while True:
            user_input = input("B·∫°n: ")
            
            if user_input.lower() in ['quit', 'exit', 'tho√°t']:
                print("Bot: T·∫°m bi·ªát! üëã")
                break
            
            result = bot.chat(user_input)
            print("Bot:", result['response'])
            print()
            
    except Exception as e:
        print(f"L·ªói kh·ªüi ƒë·ªông: {e}")
        print("Vui l√≤ng ki·ªÉm tra GEMINI_API_KEY trong file .env")
